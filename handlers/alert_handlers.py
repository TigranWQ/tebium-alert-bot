"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è TeBium Alert Bot
"""

import logging
from aiogram import Dispatcher, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

logger = logging.getLogger('TeBiumAlertBot')

def register_alert_handlers(dp: Dispatcher, alert_manager):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    @dp.callback_query(F.data.startswith("confirm_"))
    async def confirm_alert(callback: CallbackQuery, alert_manager):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = callback.data.replace("confirm_", "")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
            await callback.answer("‚úÖ –ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                callback.message.text + "\n\n‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ**",
                reply_markup=callback.message.reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    
    @dp.callback_query(F.data.startswith("delay_"))
    async def delay_alert(callback: CallbackQuery, alert_manager):
        """–û—Ç–ª–æ–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = callback.data.replace("delay_", "")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è∞ 5 –º–∏–Ω", callback_data=f"delay_5_{alert_id}"),
                    InlineKeyboardButton(text="‚è∞ 15 –º–∏–Ω", callback_data=f"delay_15_{alert_id}"),
                    InlineKeyboardButton(text="‚è∞ 30 –º–∏–Ω", callback_data=f"delay_30_{alert_id}")
                ],
                [
                    InlineKeyboardButton(text="‚è∞ 1 —á–∞—Å", callback_data=f"delay_60_{alert_id}"),
                    InlineKeyboardButton(text="‚è∞ 2 —á–∞—Å–∞", callback_data=f"delay_120_{alert_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delay_{alert_id}")
                ]
            ])
            
            await callback.message.edit_text(
                callback.message.text + "\n\n‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è:**",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è")
    
    @dp.callback_query(F.data.startswith("delay_") and F.data.count("_") == 2)
    async def process_delay_alert(callback: CallbackQuery, alert_manager):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        try:
            parts = callback.data.split("_")
            delay_minutes = int(parts[1])
            alert_id = parts[2]
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ª–æ–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            
            await callback.answer(f"‚è∞ –ê–ª–µ—Ä—Ç –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ {delay_minutes} –º–∏–Ω—É—Ç")
            
            await callback.message.edit_text(
                callback.message.text + f"\n\n‚è∞ **–û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {delay_minutes} –º–∏–Ω—É—Ç**",
                reply_markup=None
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è")
    
    @dp.callback_query(F.data.startswith("details_"))
    async def show_alert_details(callback: CallbackQuery, alert_manager):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = callback.data.replace("details_", "")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            history = await alert_manager.db.get_alert_history(1000)
            alert = next((a for a in history if a['alert_id'] == alert_id), None)
            
            if not alert:
                await callback.answer("‚ùå –ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            details = f"""
üìã **–î–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–∞**

üÜî **ID:** `{alert['alert_id']}`
üìù **–¢–∏–ø:** `{alert['type']}`
‚ö†Ô∏è **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** `{alert['priority']}`
üîß **–ú–æ–¥—É–ª—å:** `{alert['module']}`
üìÖ **–í—Ä–µ–º—è:** `{alert['timestamp']}`
üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω:** {'‚úÖ' if alert['sent'] else '‚ùå'}

üìÑ **–°–æ–æ–±—â–µ–Ω–∏–µ:**
{alert['message']}
            """
            
            if alert['data']:
                details += f"\n\nüìä **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n{alert['data']}"
            
            await callback.message.edit_text(details, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
    
    @dp.callback_query(F.data.startswith("mute_"))
    async def mute_alert(callback: CallbackQuery, alert_manager):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
        alert_id = callback.data.replace("mute_", "")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
            
            await callback.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–æ–≤")
            
            await callback.message.edit_text(
                callback.message.text + "\n\nüîï **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã**",
                reply_markup=None
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
    
    @dp.callback_query(F.data.startswith("cancel_delay_"))
    async def cancel_delay(callback: CallbackQuery):
        """–û—Ç–º–µ–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        await callback.answer("‚ùå –û—Ç–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        original_text = callback.message.text.replace("\n\n‚è∞ **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è:**", "")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{callback.data.replace('cancel_delay_', '')}"),
                InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"delay_{callback.data.replace('cancel_delay_', '')}")
            ],
            [
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data=f"details_{callback.data.replace('cancel_delay_', '')}"),
                InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"mute_{callback.data.replace('cancel_delay_', '')}")
            ]
        ])
        
        await callback.message.edit_text(original_text, reply_markup=keyboard)
