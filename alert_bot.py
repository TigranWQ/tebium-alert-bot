#!/usr/bin/env python3
"""
TeBium Alert Bot - –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import aiohttp
import json
import sqlite3
from datetime import datetime
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

from config.settings import Settings
from utils.database import DatabaseManager
from utils.alert_manager import AlertManager
from utils.logger import setup_logging
from handlers import register_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

class TeBiumAlertBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.settings = Settings()
        self.bot = Bot(token=self.settings.BOT_TOKEN)
        self.dp = Dispatcher()
        self.db = DatabaseManager(self.settings.DATABASE_URL)
        self.alert_manager = AlertManager(self.bot, self.db)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(self.dp, self.alert_manager)
        
        # Webhook URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        self.webhook_url = f"/webhook/{self.settings.WEBHOOK_SECRET}"
        
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ TeBium Alert Bot –≤ —Ä–µ–∂–∏–º–µ polling...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db.init_database()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def start_webhook(self, webhook_url: str, webhook_path: str):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ TeBium Alert Bot –≤ —Ä–µ–∂–∏–º–µ webhook: {webhook_url}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db.init_database()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
            await self.bot.set_webhook(
                url=webhook_url,
                secret_token=self.settings.WEBHOOK_SECRET
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
            app = web.Application()
            webhook_requests_handler = SimpleRequestHandler(
                dispatcher=self.dp,
                bot=self.bot,
                secret_token=self.settings.WEBHOOK_SECRET
            )
            webhook_requests_handler.register(app, path=webhook_path)
            setup_application(app, self.dp, bot=self.bot)
            
            # –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
            app.router.add_post(self.webhook_url, self.handle_alert_webhook)
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', self.settings.WEBHOOK_PORT)
            await site.start()
            
            logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.settings.WEBHOOK_PORT}")
            
            # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            try:
                await asyncio.Future()  # –ó–∞–ø—É—Å–∫ –Ω–∞–≤—Å–µ–≥–¥–∞
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                await runner.cleanup()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ webhook: {e}")
            raise
    
    async def handle_alert_webhook(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ webhook"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            if request.headers.get('Authorization') != f"Bearer {self.settings.WEBHOOK_SECRET}":
                return web.Response(status=401, text="Unauthorized")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞
            data = await request.json()
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω –∞–ª–µ—Ä—Ç: {data.get('type', 'unknown')}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞
            await self.alert_manager.process_alert(data)
            
            return web.Response(status=200, text="OK")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.Response(status=500, text="Internal Server Error")
    
    async def send_system_alert(self, alert_type: str, message: str, 
                              priority: str = "info", module: str = "system",
                              data: Optional[Dict] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        alert_data = {
            "type": alert_type,
            "message": message,
            "priority": priority,
            "module": module,
            "timestamp": datetime.now().isoformat(),
            "data": data or {}
        }
        
        await self.alert_manager.process_alert(alert_data)
    
    async def get_alert_history(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        return await self.db.get_alert_history(limit)
    
    async def get_module_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        return await self.db.get_module_status()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = TeBiumAlertBot()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    if len(sys.argv) > 1 and sys.argv[1] == "webhook":
        webhook_url = os.getenv("WEBHOOK_URL", "https://your-domain.com")
        webhook_path = "/webhook"
        await bot.start_webhook(webhook_url, webhook_path)
    else:
        await bot.start_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
