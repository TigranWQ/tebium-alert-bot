"""
–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TeBium Alert Bot
"""

import logging
from aiogram import Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from config.alert_templates import AlertTemplates

logger = logging.getLogger('TeBiumAlertBot')

def register_system_handlers(dp: Dispatcher, alert_manager):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(CommandStart())
    async def start_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton(text="üîß –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π", callback_data="modules")
            ],
            [
                InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤", callback_data="history"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ]
        ])
        
        await message.answer(
            "üö® **TeBium Alert Bot**\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤ TeBium!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    @dp.message(Command("help"))
    async def help_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üö® **TeBium Alert Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π TeBium
‚Ä¢ üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ üìä –í–µ–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤
‚Ä¢ ‚öôÔ∏è –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

**–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤:**
‚Ä¢ ‚ÑπÔ∏è **info** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ ‚ö†Ô∏è **warning** - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ ‚ùå **error** - –û—à–∏–±–∫–∏
‚Ä¢ üö® **critical** - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

**–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ –º–æ–¥—É–ª–∏:**
‚Ä¢ TeBium-Analytics-Server
‚Ä¢ Telegram-Bot-Tebium
‚Ä¢ TeBium-Alert-Bot

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        await message.answer(help_text, parse_mode='Markdown')
    
    @dp.message(Command("status"))
    async def status_command(message: Message, alert_manager):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            status_data = await alert_manager.db.get_module_status()
            
            message_text = AlertTemplates.format_system_status(status_data)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status"),
                    InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="status_details")
                ]
            ])
            
            await message.answer(message_text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    @dp.message(Command("stats"))
    async def stats_command(message: Message, alert_manager):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            stats = await alert_manager.get_alert_statistics()
            
            message_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤**

üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {stats.get('total_alerts', 0)}
üïê **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:** {stats.get('recent_alerts', 0)}

üìã **–ü–æ —Ç–∏–ø–∞–º:**
"""
            for alert_type, count in stats.get('by_type', {}).items():
                emoji = AlertTemplates.EMOJI_MAP.get(alert_type, '‚ÑπÔ∏è')
                message_text += f"{emoji} {alert_type}: {count}\n"
            
            message_text += "\nüîß **–ü–æ –º–æ–¥—É–ª—è–º:**\n"
            for module, count in stats.get('by_module', {}).items():
                message_text += f"üîß {module}: {count}\n"
            
            message_text += "\n‚ö†Ô∏è **–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:**\n"
            for priority, count in stats.get('by_priority', {}).items():
                emoji = AlertTemplates.EMOJI_MAP.get(priority, '‚ÑπÔ∏è')
                message_text += f"{emoji} {priority}: {count}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats"),
                    InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")
                ]
            ])
            
            await message.answer(message_text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    @dp.message(Command("ping"))
    async def ping_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
        start_time = datetime.now()
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(0.1)
        
        response_time = (datetime.now() - start_time).total_seconds() * 1000
        
        await message.answer(
            f"üèì **Pong!**\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: `{response_time:.2f}ms`\n"
            f"üïê –í—Ä–µ–º—è: `{datetime.now().strftime('%H:%M:%S')}`",
            parse_mode='Markdown'
        )
    
    @dp.message(Command("test"))
    async def test_command(message: Message, alert_manager):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        try:
            await alert_manager.send_system_alert(
                alert_type="test",
                message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç TeBium Alert Bot",
                priority="info",
                module="TeBium-Alert-Bot",
                data={"test": True, "timestamp": datetime.now().isoformat()}
            )
            
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")
    
    @dp.message()
    async def handle_unknown_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
        )
