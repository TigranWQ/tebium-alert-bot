"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è TeBium Alert Bot
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import aiohttp
import json

from config.alert_templates import AlertTemplates

logger = logging.getLogger('TeBiumAlertBot')

class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, bot, database_manager):
        self.bot = bot
        self.db = database_manager
        self.alert_queue = asyncio.Queue()
        self.sent_alerts = {}  # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.rate_limits = {}  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    async def process_alert(self, alert_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞
            if not self._validate_alert_data(alert_data):
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            module = alert_data.get('module', 'unknown')
            alert_type = alert_data.get('type', 'info')
            
            if not await self.db.get_alert_cooldown(module, alert_type):
                logger.info(f"‚è≥ –ê–ª–µ—Ä—Ç –æ—Ç {module} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            if self._is_rate_limited(module, alert_type):
                logger.info(f"üö´ –ê–ª–µ—Ä—Ç –æ—Ç {module} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω rate limit")
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            alert_id = await self.db.save_alert(alert_data)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏
            await self.alert_queue.put({
                'alert_id': alert_id,
                'alert_data': alert_data
            })
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cooldown
            await self.db.update_alert_cooldown(module)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ rate limit
            self._update_rate_limit(module, alert_type)
            
            logger.info(f"üì® –ê–ª–µ—Ä—Ç {alert_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def start_alert_processor(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤")
        
        while True:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                item = await self.alert_queue.get()
                alert_id = item['alert_id']
                alert_data = item['alert_data']
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
                await self._send_alert(alert_id, alert_data)
                
                # –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                self.alert_queue.task_done()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _send_alert(self, alert_id: str, alert_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = AlertTemplates.format_alert(alert_data)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            chat_ids = await self.db.get_subscribed_chats(
                alert_type=alert_data.get('type'),
                module=alert_data.get('module')
            )
            
            if not chat_ids:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç
            for chat_id in chat_ids:
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    keyboard = self._create_alert_keyboard(alert_id, alert_data)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message = await self.bot.send_message(
                        chat_id=chat_id,
                        text=message_text,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                    
                    # –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
                    await self.db.mark_alert_sent(alert_id, chat_id, message.message_id)
                    
                    logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç {alert_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ {alert_id}: {e}")
    
    def _create_alert_keyboard(self, alert_id: str, alert_data: Dict[str, Any]) -> Optional[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
        try:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"confirm_{alert_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å",
                        callback_data=f"delay_{alert_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –î–µ—Ç–∞–ª–∏",
                        callback_data=f"details_{alert_id}"
                    ),
                    InlineKeyboardButton(
                        text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å",
                        callback_data=f"mute_{alert_id}"
                    )
                ]
            ])
            
            return keyboard
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            return None
    
    def _validate_alert_data(self, alert_data: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞"""
        required_fields = ['type', 'message', 'module']
        
        for field in required_fields:
            if field not in alert_data or not alert_data[field]:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        return True
    
    def _is_rate_limited(self, module: str, alert_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –º–æ–¥—É–ª—è"""
        key = f"{module}_{alert_type}"
        now = datetime.now()
        
        if key not in self.rate_limits:
            self.rate_limits[key] = []
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
        hour_ago = now - timedelta(hours=1)
        self.rate_limits[key] = [
            timestamp for timestamp in self.rate_limits[key] 
            if timestamp > hour_ago
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 100 –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å)
        if len(self.rate_limits[key]) >= 100:
            return True
        
        return False
    
    def _update_rate_limit(self, module: str, alert_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ rate limit"""
        key = f"{module}_{alert_type}"
        if key not in self.rate_limits:
            self.rate_limits[key] = []
        
        self.rate_limits[key].append(datetime.now())
    
    async def send_system_alert(self, alert_type: str, message: str, 
                              priority: str = "info", module: str = "system",
                              data: Optional[Dict] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        alert_data = {
            "type": alert_type,
            "message": message,
            "priority": priority,
            "module": module,
            "timestamp": datetime.now().isoformat(),
            "data": data or {}
        }
        
        await self.process_alert(alert_data)
    
    async def check_module_health(self, module_name: str, health_url: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è"""
        try:
            async with aiohttp.ClientSession() as session:
                start_time = datetime.now()
                
                async with session.get(health_url, timeout=10) as response:
                    response_time = (datetime.now() - start_time).total_seconds()
                    
                    if response.status == 200:
                        status = "online"
                        await self.db.update_module_status(
                            module_name, status, response_time
                        )
                        logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –æ–Ω–ª–∞–π–Ω")
                    else:
                        status = "error"
                        await self.db.update_module_status(
                            module_name, status, response_time, 
                            f"HTTP {response.status}"
                        )
                        logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                        
        except asyncio.TimeoutError:
            await self.db.update_module_status(
                module_name, "timeout", None, "Timeout"
            )
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è {module_name}")
            
        except Exception as e:
            await self.db.update_module_status(
                module_name, "error", None, str(e)
            )
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}")
    
    async def get_alert_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            history = await self.db.get_alert_history(1000)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∞–ª–µ—Ä—Ç–æ–≤
            
            stats = {
                'total_alerts': len(history),
                'by_type': {},
                'by_module': {},
                'by_priority': {},
                'recent_alerts': len([a for a in history if 
                                    datetime.fromisoformat(a['timestamp']) > 
                                    datetime.now() - timedelta(hours=1)])
            }
            
            for alert in history:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                alert_type = alert['type']
                stats['by_type'][alert_type] = stats['by_type'].get(alert_type, 0) + 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º
                module = alert['module']
                stats['by_module'][module] = stats['by_module'].get(module, 0) + 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                priority = alert['priority']
                stats['by_priority'][priority] = stats['by_priority'].get(priority, 0) + 1
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
