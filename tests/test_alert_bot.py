"""
–¢–µ—Å—Ç—ã –¥–ª—è TeBium Alert Bot
"""

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock
from datetime import datetime

from config.settings import Settings
from utils.database import DatabaseManager
from utils.alert_manager import AlertManager
from config.alert_templates import AlertTemplates

class TestAlertTemplates:
    """–¢–µ—Å—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def test_format_alert(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        alert_data = {
            "type": "error",
            "priority": "critical",
            "module": "test-module",
            "message": "Test error message",
            "timestamp": datetime.now().isoformat(),
            "data": {"test": True}
        }
        
        formatted = AlertTemplates.format_alert(alert_data)
        
        assert "ERROR" in formatted
        assert "test-module" in formatted
        assert "Test error message" in formatted
        assert "üö®" in formatted  # –≠–º–æ–¥–∑–∏ –¥–ª—è critical
    
    def test_format_system_status(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status_data = {
            "healthy": True,
            "modules_online": 3,
            "total_modules": 3,
            "memory_usage": "50%",
            "cpu_usage": "25%"
        }
        
        formatted = AlertTemplates.format_system_status(status_data)
        
        assert "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã" in formatted
        assert "3/3" in formatted
        assert "50%" in formatted
        assert "25%" in formatted

class TestDatabaseManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    @pytest.fixture
    def db_manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î"""
        return DatabaseManager("sqlite:///:memory:")
    
    @pytest.mark.asyncio
    async def test_init_database(self, db_manager):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        await db_manager.init_database()
        # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        assert True
    
    @pytest.mark.asyncio
    async def test_save_alert(self, db_manager):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        await db_manager.init_database()
        
        alert_data = {
            "type": "test",
            "priority": "info",
            "module": "test-module",
            "message": "Test message",
            "timestamp": datetime.now().isoformat(),
            "data": {}
        }
        
        alert_id = await db_manager.save_alert(alert_data)
        assert alert_id is not None
        assert "test-module" in alert_id

class TestAlertManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    @pytest.fixture
    def mock_bot(self):
        """–ú–æ–∫ –±–æ—Ç–∞"""
        bot = Mock()
        bot.send_message = AsyncMock()
        return bot
    
    @pytest.fixture
    def mock_db(self):
        """–ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = Mock()
        db.save_alert = AsyncMock(return_value="test-alert-id")
        db.get_alert_cooldown = AsyncMock(return_value=True)
        db.update_alert_cooldown = AsyncMock()
        db.get_subscribed_chats = AsyncMock(return_value=["123456789"])
        db.mark_alert_sent = AsyncMock()
        return db
    
    @pytest.fixture
    def alert_manager(self, mock_bot, mock_db):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        return AlertManager(mock_bot, mock_db)
    
    @pytest.mark.asyncio
    async def test_process_alert(self, alert_manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞"""
        alert_data = {
            "type": "test",
            "priority": "info",
            "module": "test-module",
            "message": "Test message",
            "timestamp": datetime.now().isoformat(),
            "data": {}
        }
        
        await alert_manager.process_alert(alert_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        alert_manager.db.save_alert.assert_called_once()
        alert_manager.db.update_alert_cooldown.assert_called_once()
    
    def test_validate_alert_data(self, alert_manager):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞"""
        # –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_data = {
            "type": "test",
            "message": "Test message",
            "module": "test-module"
        }
        assert alert_manager._validate_alert_data(valid_data) == True
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç type)
        invalid_data = {
            "message": "Test message",
            "module": "test-module"
        }
        assert alert_manager._validate_alert_data(invalid_data) == False
    
    def test_rate_limiting(self, alert_manager):
        """–¢–µ—Å—Ç rate limiting"""
        module = "test-module"
        alert_type = "test"
        
        # –ü–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        assert not alert_manager._is_rate_limited(module, alert_type)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º rate limit
        alert_manager._update_rate_limit(module, alert_type)
        
        # –í—Ç–æ—Ä–æ–π –∞–ª–µ—Ä—Ç —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ (–ª–∏–º–∏—Ç 100 –≤ —á–∞—Å)
        assert not alert_manager._is_rate_limited(module, alert_type)

@pytest.mark.asyncio
async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    settings = Settings()
    db = DatabaseManager("sqlite:///:memory:")
    
    await db.init_database()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
    mock_bot = Mock()
    mock_bot.send_message = AsyncMock()
    
    alert_manager = AlertManager(mock_bot, db)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç
    await alert_manager.send_system_alert(
        alert_type="test",
        message="Integration test message",
        priority="info",
        module="test-module"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–µ—Ä—Ç –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î
    history = await db.get_alert_history(10)
    assert len(history) == 1
    assert history[0]["type"] == "test"
    assert history[0]["message"] == "Integration test message"

if __name__ == "__main__":
    pytest.main([__file__])
