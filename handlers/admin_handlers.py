"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è TeBium Alert Bot
"""

import logging
from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config.alert_templates import AlertTemplates

logger = logging.getLogger('TeBiumAlertBot')

class AdminStates(StatesGroup):
    waiting_for_chat_id = State()
    waiting_for_alert_message = State()

def register_admin_handlers(dp: Dispatcher, alert_manager):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(Command("admin"))
    async def admin_panel(message: Message):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üîß –ú–æ–¥—É–ª–∏", callback_data="admin_modules")
            ],
            [
                InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="admin_send_alert"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_history"),
                InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª–∏", callback_data="admin_check_modules")
            ]
        ])
        
        await message.answer(
            "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    @dp.callback_query(F.data == "admin_stats")
    async def show_statistics(callback: CallbackQuery, alert_manager):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            stats = await alert_manager.get_alert_statistics()
            
            message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤**

üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {stats.get('total_alerts', 0)}
üïê **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:** {stats.get('recent_alerts', 0)}

üìã **–ü–æ —Ç–∏–ø–∞–º:**
"""
            for alert_type, count in stats.get('by_type', {}).items():
                message += f"‚Ä¢ {alert_type}: {count}\n"
            
            message += "\nüîß **–ü–æ –º–æ–¥—É–ª—è–º:**\n"
            for module, count in stats.get('by_module', {}).items():
                message += f"‚Ä¢ {module}: {count}\n"
            
            message += "\n‚ö†Ô∏è **–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:**\n"
            for priority, count in stats.get('by_priority', {}).items():
                message += f"‚Ä¢ {priority}: {count}\n"
            
            await callback.message.edit_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    @dp.callback_query(F.data == "admin_modules")
    async def show_modules_status(callback: CallbackQuery, alert_manager):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π"""
        try:
            status_data = await alert_manager.db.get_module_status()
            
            message = "üîß **–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π**\n\n"
            
            for module_name, module_info in status_data.get('modules', {}).items():
                status_emoji = "‚úÖ" if module_info['status'] == 'online' else "‚ùå"
                response_time = module_info.get('response_time', 'N/A')
                
                message += f"{status_emoji} **{module_name}**\n"
                message += f"   –°—Ç–∞—Ç—É—Å: `{module_info['status']}`\n"
                message += f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: `{response_time}ms`\n"
                message += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: `{module_info['last_check']}`\n\n"
            
            await callback.message.edit_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª–µ–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª–µ–π")
    
    @dp.callback_query(F.data == "admin_send_alert")
    async def start_send_alert(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞"""
        await state.set_state(AdminStates.waiting_for_alert_message)
        await callback.message.edit_text(
            "üì® **–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`—Ç–∏–ø|–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–º–æ–¥—É–ª—å|—Å–æ–æ–±—â–µ–Ω–∏–µ`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `error|critical|system|–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`",
            parse_mode='Markdown'
        )
    
    @dp.message(AdminStates.waiting_for_alert_message)
    async def process_alert_message(message: Message, state: FSMContext, alert_manager):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–ª–µ—Ä—Ç–æ–º"""
        try:
            parts = message.text.split('|', 3)
            if len(parts) != 4:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`—Ç–∏–ø|–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–º–æ–¥—É–ª—å|—Å–æ–æ–±—â–µ–Ω–∏–µ`"
                )
                return
            
            alert_type, priority, module, alert_message = parts
            
            await alert_manager.send_system_alert(
                alert_type=alert_type.strip(),
                message=alert_message.strip(),
                priority=priority.strip(),
                module=module.strip()
            )
            
            await message.answer("‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            await state.clear()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞")
            await state.clear()
    
    @dp.callback_query(F.data == "admin_check_modules")
    async def check_modules_health(callback: CallbackQuery, alert_manager):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª–µ–π"""
        try:
            await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–¥—É–ª–∏...")
            
            # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            modules_to_check = [
                ("TeBium-Analytics-Server", "http://localhost:8081/health"),
                ("Telegram-Bot-Tebium", "http://localhost:8080/health"),
            ]
            
            for module_name, health_url in modules_to_check:
                await alert_manager.check_module_health(module_name, health_url)
            
            await callback.message.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π")
    
    @dp.callback_query(F.data == "admin_history")
    async def show_alert_history(callback: CallbackQuery, alert_manager):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            history = await alert_manager.db.get_alert_history(10)
            
            if not history:
                await callback.message.edit_text("üìã –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—É—Å—Ç–∞")
                return
            
            message = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã**\n\n"
            
            for alert in history[:10]:
                timestamp = alert['timestamp'][:19]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–µ–∫—É–Ω–¥
                emoji = AlertTemplates.EMOJI_MAP.get(alert['priority'], '‚ÑπÔ∏è')
                
                message += f"{emoji} **{alert['type']}** - {alert['module']}\n"
                message += f"   {alert['message'][:50]}...\n"
                message += f"   `{timestamp}`\n\n"
            
            await callback.message.edit_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
    
    @dp.callback_query(F.data == "admin_settings")
    async def show_settings(callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        message = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**

üîß **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥—É–ª–µ–π:**
‚Ä¢ TeBium-Analytics-Server: ‚úÖ
‚Ä¢ Telegram-Bot-Tebium: ‚úÖ
‚Ä¢ TeBium-Alert-Bot: ‚úÖ

üìä **–õ–∏–º–∏—Ç—ã:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∞–ª–µ—Ä—Ç–æ–≤ –≤ —á–∞—Å: 100
‚Ä¢ Cooldown –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏: 60 —Å–µ–∫
‚Ä¢ –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π: 10 —Å–µ–∫

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –≠–º–æ–¥–∑–∏: ‚úÖ
‚Ä¢ Markdown: ‚úÖ
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π: ‚úÖ
        """
        
        await callback.message.edit_text(message, parse_mode='Markdown')
